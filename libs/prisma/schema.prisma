generator client {
  provider = "prisma-client-js"
  output   = "./src/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CREATOR
  EDITOR
}

model User {
  id                  String    @id @default(uuid())
  username            String
  subId               String    @unique
  email               String    @unique
  createdAt           DateTime  @default(now())
  type                UserType
  youtubeAccessToken  String?
  youtubeRefreshToken String?
  youtubeExpiresAt    DateTime?

  // opposite relations
  creatorChats Chat[]    @relation("CreatorChats")
  editorChats  Chat[]    @relation("EditorChats")
  messages     Message[]
}

model Chat {
  id        String    @id @default(uuid())
  creatorId String
  editorId  String
  creator   User      @relation("CreatorChats", fields: [creatorId], references: [id])
  editor    User      @relation("EditorChats", fields: [editorId], references: [id])
  messages  Message[]
  updatedAt DateTime  @updatedAt

  @@unique([creatorId, editorId])
  @@index([creatorId])
  @@index([editorId])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  VIDEO_REQUEST
}

model Message {
  id           String         @id @default(uuid())
  chatId       String
  chat         Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  type         MessageType
  text         String?
  image        String[] // s3 id or filepath/url
  video        String[] // s3 id or filepath/url
  byId         String
  by           User           @relation(fields: [byId], references: [id])
  videoRequest VideoRequest[] // if versioned
  createdAt    DateTime       @default(now())
}

enum VideoRequestStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
}

enum VideoUploadStatus {
  NOT_APPROVED
  UPLOAD_STARTED
  VIDEO_UPLOADED
  THUMBNAIL_UPDATED
}

model VideoRequest {
  id           String             @id @default(uuid())
  messageId    String
  title        String
  version      Int
  description  String
  chatId       String
  thumbnail    String // s3 id or filepath
  video        String // s3 id or filepath
  updatedAt    DateTime           @updatedAt
  status       VideoRequestStatus
  uploadStatus VideoUploadStatus  @default(NOT_APPROVED)
  createdAt    DateTime           @default(now())
  message      Message            @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  username  String
  feedback  String?
  feature   String?
}
